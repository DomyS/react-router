{"version":3,"sources":["Nav.js","About.js","Shop.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","react_default","a","createElement","className","react_router_dom","style","to","About","Shop","useEffect","fetchItems","_useState","useState","_useState2","Object","slicedToArray","items","setItems","_ref","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","fetch","sent","json","console","log","stop","apply","this","arguments","map","item","key","itemid","concat","name","ItemDetail","match","fetchItem","images","setItem","_ref2","params","id","src","transparent","alt","Home","App","src_Nav","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1814a0d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav () {\r\n    const navStyle = {\r\n        color: 'white'\r\n    };\r\n\r\n  return (\r\n    <nav>\r\n    <h3>Logo</h3>\r\n    <ul className=\"nav-links\">\r\n    <Link style={navStyle} to=\"/about\">\r\n       <li>About</li>\r\n    </Link>\r\n    <Link style={navStyle} to=\"/shop\">\r\n       <li>Shop</li>\r\n       </Link>\r\n    </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About () {\r\n  return (\r\n    <div>\r\n      <h1>About Page</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Shop () {\r\n    useEffect(() => {\r\n    fetchItems();\r\n    },[]);\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\nconst fetchItems = async () => {\r\n    const data= await fetch('https://fortnite-public-api.theapinetwork.com/prod09/upcoming/get');\r\n    const items = await data.json();\r\n    console.log(items.items);\r\n    setItems(items.items);\r\n}\r\n\r\n  return (\r\n    <div>\r\n      {items.map(item => (\r\n          <h1 key={item.itemid}><Link to={`/shop/${item.itemid}`}>{item.name}</Link></h1>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction ItemDetail ({ match }) {\r\n    useEffect(() => {\r\n        fetchItem();\r\n        console.log(match)\r\n        }, []);\r\n\r\n    const [item, setItem] = useState({\r\n        images: {}\r\n    });\r\n\r\n    const fetchItem = async () => {\r\n    const fetchItem = await fetch(`https://fortnite-public-api.theapinetwork.com/prod09/item/get?ids=${match.params.id}`);\r\n    const item = await fetchItem.json();\r\n    setItem(item);\r\n    console.log(item);\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{item.name}</h1>\r\n      <img src={item.images.transparent} alt=\"\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDetail;","import React from 'react';\nimport './App.css';\nimport Nav from \"./Nav\";\nimport About from \"./About\";\nimport Shop from './Shop';\nimport ItemDetail from './ItemDetail';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Nav/>\n      <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/shop\" exact component={Shop} />\n      <Route path=\"/shop/:id\" component={ItemDetail} />\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <div><h1>Home Page</h1></div>\n)\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}